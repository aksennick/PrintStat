#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrintStat
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PrinterStat")]
	public partial class PrinterStatDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertDeviceType(DeviceType instance);
    partial void UpdateDeviceType(DeviceType instance);
    partial void DeleteDeviceType(DeviceType instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertPaperType(PaperType instance);
    partial void UpdatePaperType(PaperType instance);
    partial void DeletePaperType(PaperType instance);
    partial void InsertPrinter(Printer instance);
    partial void UpdatePrinter(Printer instance);
    partial void DeletePrinter(Printer instance);
    partial void InsertPrintKind(PrintKind instance);
    partial void UpdatePrintKind(PrintKind instance);
    partial void DeletePrintKind(PrintKind instance);
    partial void InsertCartridge(Cartridge instance);
    partial void UpdateCartridge(Cartridge instance);
    partial void DeleteCartridge(Cartridge instance);
    partial void InsertCartridgeColor(CartridgeColor instance);
    partial void UpdateCartridgeColor(CartridgeColor instance);
    partial void DeleteCartridgeColor(CartridgeColor instance);
    partial void InsertSetup(Setup instance);
    partial void UpdateSetup(Setup instance);
    partial void DeleteSetup(Setup instance);
    #endregion
		
		public PrinterStatDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PrinterStatConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PrinterStatDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrinterStatDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrinterStatDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrinterStatDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DeviceType> DeviceType
		{
			get
			{
				return this.GetTable<DeviceType>();
			}
		}
		
		public System.Data.Linq.Table<Job> Job
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<Application> Application
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Department> Department
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<PaperType> PaperType
		{
			get
			{
				return this.GetTable<PaperType>();
			}
		}
		
		public System.Data.Linq.Table<Printer> Printer
		{
			get
			{
				return this.GetTable<Printer>();
			}
		}
		
		public System.Data.Linq.Table<PrintKind> PrintKind
		{
			get
			{
				return this.GetTable<PrintKind>();
			}
		}
		
		public System.Data.Linq.Table<Cartridge> Cartridge
		{
			get
			{
				return this.GetTable<Cartridge>();
			}
		}
		
		public System.Data.Linq.Table<CartridgeColor> CartridgeColor
		{
			get
			{
				return this.GetTable<CartridgeColor>();
			}
		}
		
		public System.Data.Linq.Table<Setup> Setup
		{
			get
			{
				return this.GetTable<Setup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceType")]
	public partial class DeviceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<PaperType> _PaperType;
		
		private EntitySet<Printer> _Printer;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DeviceType()
		{
			this._PaperType = new EntitySet<PaperType>(new Action<PaperType>(this.attach_PaperType), new Action<PaperType>(this.detach_PaperType));
			this._Printer = new EntitySet<Printer>(new Action<Printer>(this.attach_Printer), new Action<Printer>(this.detach_Printer));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_PaperType", Storage="_PaperType", ThisKey="ID", OtherKey="DeviceTypeID")]
		public EntitySet<PaperType> PaperType
		{
			get
			{
				return this._PaperType;
			}
			set
			{
				this._PaperType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_Printer", Storage="_Printer", ThisKey="ID", OtherKey="DeviceTypeID")]
		public EntitySet<Printer> Printer
		{
			get
			{
				return this._Printer;
			}
			set
			{
				this._Printer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaperType(PaperType entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = this;
		}
		
		private void detach_PaperType(PaperType entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = null;
		}
		
		private void attach_Printer(Printer entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = this;
		}
		
		private void detach_Printer(Printer entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _PrinterID;
		
		private int _ApplicationID;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _UserTabNumber;
		
		private System.Nullable<int> _Pages;
		
		private int _Copies;
		
		private decimal _Width_cm;
		
		private decimal _Height_cm;
		
		private System.Nullable<int> _Width_px;
		
		private System.Nullable<int> _Height_px;
		
		private System.Nullable<int> _PaperTypeID;
		
		private string _AuthorTabNumber;
		
		private System.Nullable<int> _Size_kb;
		
		private string _IP;
		
		private string _ComputerName;
		
		private bool _IsManual;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<Employee> _Author;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<PaperType> _PaperType;
		
		private EntityRef<Printer> _Printer;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPrinterIDChanging(int value);
    partial void OnPrinterIDChanged();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnUserTabNumberChanging(string value);
    partial void OnUserTabNumberChanged();
    partial void OnPagesChanging(System.Nullable<int> value);
    partial void OnPagesChanged();
    partial void OnCopiesChanging(int value);
    partial void OnCopiesChanged();
    partial void OnWidth_cmChanging(decimal value);
    partial void OnWidth_cmChanged();
    partial void OnHeight_cmChanging(decimal value);
    partial void OnHeight_cmChanged();
    partial void OnWidth_pxChanging(System.Nullable<int> value);
    partial void OnWidth_pxChanged();
    partial void OnHeight_pxChanging(System.Nullable<int> value);
    partial void OnHeight_pxChanged();
    partial void OnPaperTypeIDChanging(System.Nullable<int> value);
    partial void OnPaperTypeIDChanged();
    partial void OnAuthorTabNumberChanging(string value);
    partial void OnAuthorTabNumberChanged();
    partial void OnSize_kbChanging(System.Nullable<int> value);
    partial void OnSize_kbChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnComputerNameChanging(string value);
    partial void OnComputerNameChanged();
    partial void OnIsManualChanging(bool value);
    partial void OnIsManualChanged();
    #endregion
		
		public Job()
		{
			this._Application = default(EntityRef<Application>);
			this._Author = default(EntityRef<Employee>);
			this._Employee = default(EntityRef<Employee>);
			this._PaperType = default(EntityRef<PaperType>);
			this._Printer = default(EntityRef<Printer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterID", DbType="Int NOT NULL")]
		public int PrinterID
		{
			get
			{
				return this._PrinterID;
			}
			set
			{
				if ((this._PrinterID != value))
				{
					if (this._Printer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrinterIDChanging(value);
					this.SendPropertyChanging();
					this._PrinterID = value;
					this.SendPropertyChanged("PrinterID");
					this.OnPrinterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int NOT NULL")]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTabNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserTabNumber
		{
			get
			{
				return this._UserTabNumber;
			}
			set
			{
				if ((this._UserTabNumber != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTabNumberChanging(value);
					this.SendPropertyChanging();
					this._UserTabNumber = value;
					this.SendPropertyChanged("UserTabNumber");
					this.OnUserTabNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pages", DbType="Int")]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Copies", DbType="Int NOT NULL")]
		public int Copies
		{
			get
			{
				return this._Copies;
			}
			set
			{
				if ((this._Copies != value))
				{
					this.OnCopiesChanging(value);
					this.SendPropertyChanging();
					this._Copies = value;
					this.SendPropertyChanged("Copies");
					this.OnCopiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width_cm", DbType="Decimal(6,2) NOT NULL")]
		public decimal Width_cm
		{
			get
			{
				return this._Width_cm;
			}
			set
			{
				if ((this._Width_cm != value))
				{
					this.OnWidth_cmChanging(value);
					this.SendPropertyChanging();
					this._Width_cm = value;
					this.SendPropertyChanged("Width_cm");
					this.OnWidth_cmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height_cm", DbType="Decimal(6,2) NOT NULL")]
		public decimal Height_cm
		{
			get
			{
				return this._Height_cm;
			}
			set
			{
				if ((this._Height_cm != value))
				{
					this.OnHeight_cmChanging(value);
					this.SendPropertyChanging();
					this._Height_cm = value;
					this.SendPropertyChanged("Height_cm");
					this.OnHeight_cmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width_px", DbType="Int")]
		public System.Nullable<int> Width_px
		{
			get
			{
				return this._Width_px;
			}
			set
			{
				if ((this._Width_px != value))
				{
					this.OnWidth_pxChanging(value);
					this.SendPropertyChanging();
					this._Width_px = value;
					this.SendPropertyChanged("Width_px");
					this.OnWidth_pxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height_px", DbType="Int")]
		public System.Nullable<int> Height_px
		{
			get
			{
				return this._Height_px;
			}
			set
			{
				if ((this._Height_px != value))
				{
					this.OnHeight_pxChanging(value);
					this.SendPropertyChanging();
					this._Height_px = value;
					this.SendPropertyChanged("Height_px");
					this.OnHeight_pxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaperTypeID", DbType="Int")]
		public System.Nullable<int> PaperTypeID
		{
			get
			{
				return this._PaperTypeID;
			}
			set
			{
				if ((this._PaperTypeID != value))
				{
					if (this._PaperType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaperTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PaperTypeID = value;
					this.SendPropertyChanged("PaperTypeID");
					this.OnPaperTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorTabNumber", DbType="NVarChar(50)")]
		public string AuthorTabNumber
		{
			get
			{
				return this._AuthorTabNumber;
			}
			set
			{
				if ((this._AuthorTabNumber != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorTabNumberChanging(value);
					this.SendPropertyChanging();
					this._AuthorTabNumber = value;
					this.SendPropertyChanged("AuthorTabNumber");
					this.OnAuthorTabNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size_kb", DbType="Int")]
		public System.Nullable<int> Size_kb
		{
			get
			{
				return this._Size_kb;
			}
			set
			{
				if ((this._Size_kb != value))
				{
					this.OnSize_kbChanging(value);
					this.SendPropertyChanging();
					this._Size_kb = value;
					this.SendPropertyChanged("Size_kb");
					this.OnSize_kbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NVarChar(16)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerName", DbType="NVarChar(50)")]
		public string ComputerName
		{
			get
			{
				return this._ComputerName;
			}
			set
			{
				if ((this._ComputerName != value))
				{
					this.OnComputerNameChanging(value);
					this.SendPropertyChanging();
					this._ComputerName = value;
					this.SendPropertyChanged("ComputerName");
					this.OnComputerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManual", DbType="Bit NOT NULL")]
		public bool IsManual
		{
			get
			{
				return this._IsManual;
			}
			set
			{
				if ((this._IsManual != value))
				{
					this.OnIsManualChanging(value);
					this.SendPropertyChanging();
					this._IsManual = value;
					this.SendPropertyChanged("IsManual");
					this.OnIsManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Job", Storage="_Application", ThisKey="ApplicationID", OtherKey="ID", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Job.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Job.Add(this);
						this._ApplicationID = value.ID;
					}
					else
					{
						this._ApplicationID = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job", Storage="_Author", ThisKey="AuthorTabNumber", OtherKey="TabNumber", IsForeignKey=true)]
		public Employee Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Employee previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Job.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Job.Add(this);
						this._AuthorTabNumber = value.TabNumber;
					}
					else
					{
						this._AuthorTabNumber = default(string);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job1", Storage="_Employee", ThisKey="UserTabNumber", OtherKey="TabNumber", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Job1.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Job1.Add(this);
						this._UserTabNumber = value.TabNumber;
					}
					else
					{
						this._UserTabNumber = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaperType_Job", Storage="_PaperType", ThisKey="PaperTypeID", OtherKey="ID", IsForeignKey=true)]
		public PaperType PaperType
		{
			get
			{
				return this._PaperType.Entity;
			}
			set
			{
				PaperType previousValue = this._PaperType.Entity;
				if (((previousValue != value) 
							|| (this._PaperType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaperType.Entity = null;
						previousValue.Job.Remove(this);
					}
					this._PaperType.Entity = value;
					if ((value != null))
					{
						value.Job.Add(this);
						this._PaperTypeID = value.ID;
					}
					else
					{
						this._PaperTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaperType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_Job", Storage="_Printer", ThisKey="PrinterID", OtherKey="ID", IsForeignKey=true)]
		public Printer Printer
		{
			get
			{
				return this._Printer.Entity;
			}
			set
			{
				Printer previousValue = this._Printer.Entity;
				if (((previousValue != value) 
							|| (this._Printer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Printer.Entity = null;
						previousValue.Job.Remove(this);
					}
					this._Printer.Entity = value;
					if ((value != null))
					{
						value.Job.Add(this);
						this._PrinterID = value.ID;
					}
					else
					{
						this._PrinterID = default(int);
					}
					this.SendPropertyChanged("Printer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Job> _Job;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Application()
		{
			this._Job = new EntitySet<Job>(new Action<Job>(this.attach_Job), new Action<Job>(this.detach_Job));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Job", Storage="_Job", ThisKey="ID", OtherKey="ApplicationID")]
		public EntitySet<Job> Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				this._Job.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TabNumber;
		
		private string _Name;
		
		private int _DepartmentID;
		
		private EntitySet<Job> _Job;
		
		private EntitySet<Job> _Job1;
		
		private EntitySet<Setup> _Setup;
		
		private EntityRef<Department> _Department;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTabNumberChanging(string value);
    partial void OnTabNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public Employee()
		{
			this._Job = new EntitySet<Job>(new Action<Job>(this.attach_Job), new Action<Job>(this.detach_Job));
			this._Job1 = new EntitySet<Job>(new Action<Job>(this.attach_Job1), new Action<Job>(this.detach_Job1));
			this._Setup = new EntitySet<Setup>(new Action<Setup>(this.attach_Setup), new Action<Setup>(this.detach_Setup));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TabNumber
		{
			get
			{
				return this._TabNumber;
			}
			set
			{
				if ((this._TabNumber != value))
				{
					this.OnTabNumberChanging(value);
					this.SendPropertyChanging();
					this._TabNumber = value;
					this.SendPropertyChanged("TabNumber");
					this.OnTabNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job", Storage="_Job", ThisKey="TabNumber", OtherKey="AuthorTabNumber")]
		public EntitySet<Job> Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				this._Job.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job1", Storage="_Job1", ThisKey="TabNumber", OtherKey="UserTabNumber")]
		public EntitySet<Job> Job1
		{
			get
			{
				return this._Job1;
			}
			set
			{
				this._Job1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Setup", Storage="_Setup", ThisKey="TabNumber", OtherKey="TabNumber")]
		public EntitySet<Setup> Setup
		{
			get
			{
				return this._Setup;
			}
			set
			{
				this._Setup.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employee.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employee.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
		
		private void attach_Job1(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Job1(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Setup(Setup entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Setup(Setup entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ShortName;
		
		private EntitySet<Employee> _Employee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Department()
		{
			this._Employee = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee), new Action<Employee>(this.detach_Employee));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employee", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<Employee> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				this._Employee.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaperType")]
	public partial class PaperType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<decimal> _Width_cm;
		
		private System.Nullable<decimal> _Height_cm;
		
		private System.Nullable<int> _DeviceTypeID;
		
		private EntitySet<Job> _Job;
		
		private EntityRef<DeviceType> _DeviceType;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWidth_cmChanging(System.Nullable<decimal> value);
    partial void OnWidth_cmChanged();
    partial void OnHeight_cmChanging(System.Nullable<decimal> value);
    partial void OnHeight_cmChanged();
    partial void OnDeviceTypeIDChanging(System.Nullable<int> value);
    partial void OnDeviceTypeIDChanged();
    #endregion
		
		public PaperType()
		{
			this._Job = new EntitySet<Job>(new Action<Job>(this.attach_Job), new Action<Job>(this.detach_Job));
			this._DeviceType = default(EntityRef<DeviceType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width_cm", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Width_cm
		{
			get
			{
				return this._Width_cm;
			}
			set
			{
				if ((this._Width_cm != value))
				{
					this.OnWidth_cmChanging(value);
					this.SendPropertyChanging();
					this._Width_cm = value;
					this.SendPropertyChanged("Width_cm");
					this.OnWidth_cmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height_cm", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Height_cm
		{
			get
			{
				return this._Height_cm;
			}
			set
			{
				if ((this._Height_cm != value))
				{
					this.OnHeight_cmChanging(value);
					this.SendPropertyChanging();
					this._Height_cm = value;
					this.SendPropertyChanged("Height_cm");
					this.OnHeight_cmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceTypeID", DbType="Int")]
		public System.Nullable<int> DeviceTypeID
		{
			get
			{
				return this._DeviceTypeID;
			}
			set
			{
				if ((this._DeviceTypeID != value))
				{
					if (this._DeviceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceTypeID = value;
					this.SendPropertyChanged("DeviceTypeID");
					this.OnDeviceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaperType_Job", Storage="_Job", ThisKey="ID", OtherKey="PaperTypeID")]
		public EntitySet<Job> Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				this._Job.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_PaperType", Storage="_DeviceType", ThisKey="DeviceTypeID", OtherKey="ID", IsForeignKey=true)]
		public DeviceType DeviceType
		{
			get
			{
				return this._DeviceType.Entity;
			}
			set
			{
				DeviceType previousValue = this._DeviceType.Entity;
				if (((previousValue != value) 
							|| (this._DeviceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceType.Entity = null;
						previousValue.PaperType.Remove(this);
					}
					this._DeviceType.Entity = value;
					if ((value != null))
					{
						value.PaperType.Add(this);
						this._DeviceTypeID = value.ID;
					}
					else
					{
						this._DeviceTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeviceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.PaperType = this;
		}
		
		private void detach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.PaperType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Printer")]
	public partial class Printer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _DeviceTypeID;
		
		private int _PrintKindID;
		
		private string _SearchString;
		
		private string _InvNumber;
		
		private bool _StatisticsSupported;
		
		private EntitySet<Job> _Job;
		
		private EntitySet<Cartridge> _Cartridge;
		
		private EntityRef<DeviceType> _DeviceType;
		
		private EntityRef<PrintKind> _PrintKind;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDeviceTypeIDChanging(int value);
    partial void OnDeviceTypeIDChanged();
    partial void OnPrintKindIDChanging(int value);
    partial void OnPrintKindIDChanged();
    partial void OnSearchStringChanging(string value);
    partial void OnSearchStringChanged();
    partial void OnInvNumberChanging(string value);
    partial void OnInvNumberChanged();
    partial void OnStatisticsSupportedChanging(bool value);
    partial void OnStatisticsSupportedChanged();
    #endregion
		
		public Printer()
		{
			this._Job = new EntitySet<Job>(new Action<Job>(this.attach_Job), new Action<Job>(this.detach_Job));
			this._Cartridge = new EntitySet<Cartridge>(new Action<Cartridge>(this.attach_Cartridge), new Action<Cartridge>(this.detach_Cartridge));
			this._DeviceType = default(EntityRef<DeviceType>);
			this._PrintKind = default(EntityRef<PrintKind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceTypeID", DbType="Int NOT NULL")]
		public int DeviceTypeID
		{
			get
			{
				return this._DeviceTypeID;
			}
			set
			{
				if ((this._DeviceTypeID != value))
				{
					if (this._DeviceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceTypeID = value;
					this.SendPropertyChanged("DeviceTypeID");
					this.OnDeviceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintKindID", DbType="Int NOT NULL")]
		public int PrintKindID
		{
			get
			{
				return this._PrintKindID;
			}
			set
			{
				if ((this._PrintKindID != value))
				{
					if (this._PrintKind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrintKindIDChanging(value);
					this.SendPropertyChanging();
					this._PrintKindID = value;
					this.SendPropertyChanged("PrintKindID");
					this.OnPrintKindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SearchString", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SearchString
		{
			get
			{
				return this._SearchString;
			}
			set
			{
				if ((this._SearchString != value))
				{
					this.OnSearchStringChanging(value);
					this.SendPropertyChanging();
					this._SearchString = value;
					this.SendPropertyChanged("SearchString");
					this.OnSearchStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvNumber", DbType="NVarChar(10)")]
		public string InvNumber
		{
			get
			{
				return this._InvNumber;
			}
			set
			{
				if ((this._InvNumber != value))
				{
					this.OnInvNumberChanging(value);
					this.SendPropertyChanging();
					this._InvNumber = value;
					this.SendPropertyChanged("InvNumber");
					this.OnInvNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatisticsSupported", DbType="Bit NOT NULL")]
		public bool StatisticsSupported
		{
			get
			{
				return this._StatisticsSupported;
			}
			set
			{
				if ((this._StatisticsSupported != value))
				{
					this.OnStatisticsSupportedChanging(value);
					this.SendPropertyChanging();
					this._StatisticsSupported = value;
					this.SendPropertyChanged("StatisticsSupported");
					this.OnStatisticsSupportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_Job", Storage="_Job", ThisKey="ID", OtherKey="PrinterID")]
		public EntitySet<Job> Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				this._Job.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_Cartridge", Storage="_Cartridge", ThisKey="ID", OtherKey="PrinterID")]
		public EntitySet<Cartridge> Cartridge
		{
			get
			{
				return this._Cartridge;
			}
			set
			{
				this._Cartridge.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_Printer", Storage="_DeviceType", ThisKey="DeviceTypeID", OtherKey="ID", IsForeignKey=true)]
		public DeviceType DeviceType
		{
			get
			{
				return this._DeviceType.Entity;
			}
			set
			{
				DeviceType previousValue = this._DeviceType.Entity;
				if (((previousValue != value) 
							|| (this._DeviceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceType.Entity = null;
						previousValue.Printer.Remove(this);
					}
					this._DeviceType.Entity = value;
					if ((value != null))
					{
						value.Printer.Add(this);
						this._DeviceTypeID = value.ID;
					}
					else
					{
						this._DeviceTypeID = default(int);
					}
					this.SendPropertyChanged("DeviceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrintKind_Printer", Storage="_PrintKind", ThisKey="PrintKindID", OtherKey="ID", IsForeignKey=true)]
		public PrintKind PrintKind
		{
			get
			{
				return this._PrintKind.Entity;
			}
			set
			{
				PrintKind previousValue = this._PrintKind.Entity;
				if (((previousValue != value) 
							|| (this._PrintKind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrintKind.Entity = null;
						previousValue.Printer.Remove(this);
					}
					this._PrintKind.Entity = value;
					if ((value != null))
					{
						value.Printer.Add(this);
						this._PrintKindID = value.ID;
					}
					else
					{
						this._PrintKindID = default(int);
					}
					this.SendPropertyChanged("PrintKind");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.Printer = this;
		}
		
		private void detach_Job(Job entity)
		{
			this.SendPropertyChanging();
			entity.Printer = null;
		}
		
		private void attach_Cartridge(Cartridge entity)
		{
			this.SendPropertyChanging();
			entity.Printer = this;
		}
		
		private void detach_Cartridge(Cartridge entity)
		{
			this.SendPropertyChanging();
			entity.Printer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrintKind")]
	public partial class PrintKind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Printer> _Printer;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PrintKind()
		{
			this._Printer = new EntitySet<Printer>(new Action<Printer>(this.attach_Printer), new Action<Printer>(this.detach_Printer));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrintKind_Printer", Storage="_Printer", ThisKey="ID", OtherKey="PrintKindID")]
		public EntitySet<Printer> Printer
		{
			get
			{
				return this._Printer;
			}
			set
			{
				this._Printer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Printer(Printer entity)
		{
			this.SendPropertyChanging();
			entity.PrintKind = this;
		}
		
		private void detach_Printer(Printer entity)
		{
			this.SendPropertyChanging();
			entity.PrintKind = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cartridge")]
	public partial class Cartridge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PrinterID;
		
		private int _ColorID;
		
		private string _Name;
		
		private string _ShortName;
		
		private EntityRef<Printer> _Printer;
		
		private EntityRef<CartridgeColor> _CartridgeColor;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPrinterIDChanging(int value);
    partial void OnPrinterIDChanged();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public Cartridge()
		{
			this._Printer = default(EntityRef<Printer>);
			this._CartridgeColor = default(EntityRef<CartridgeColor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrinterID", DbType="Int NOT NULL")]
		public int PrinterID
		{
			get
			{
				return this._PrinterID;
			}
			set
			{
				if ((this._PrinterID != value))
				{
					if (this._Printer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrinterIDChanging(value);
					this.SendPropertyChanging();
					this._PrinterID = value;
					this.SendPropertyChanged("PrinterID");
					this.OnPrinterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="Int NOT NULL")]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._CartridgeColor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(5)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Printer_Cartridge", Storage="_Printer", ThisKey="PrinterID", OtherKey="ID", IsForeignKey=true)]
		public Printer Printer
		{
			get
			{
				return this._Printer.Entity;
			}
			set
			{
				Printer previousValue = this._Printer.Entity;
				if (((previousValue != value) 
							|| (this._Printer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Printer.Entity = null;
						previousValue.Cartridge.Remove(this);
					}
					this._Printer.Entity = value;
					if ((value != null))
					{
						value.Cartridge.Add(this);
						this._PrinterID = value.ID;
					}
					else
					{
						this._PrinterID = default(int);
					}
					this.SendPropertyChanged("Printer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CartridgeColor_Cartridge", Storage="_CartridgeColor", ThisKey="ColorID", OtherKey="ID", IsForeignKey=true)]
		public CartridgeColor CartridgeColor
		{
			get
			{
				return this._CartridgeColor.Entity;
			}
			set
			{
				CartridgeColor previousValue = this._CartridgeColor.Entity;
				if (((previousValue != value) 
							|| (this._CartridgeColor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CartridgeColor.Entity = null;
						previousValue.Cartridge.Remove(this);
					}
					this._CartridgeColor.Entity = value;
					if ((value != null))
					{
						value.Cartridge.Add(this);
						this._ColorID = value.ID;
					}
					else
					{
						this._ColorID = default(int);
					}
					this.SendPropertyChanged("CartridgeColor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CartridgeColor")]
	public partial class CartridgeColor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ShortName;
		
		private EntitySet<Cartridge> _Cartridge;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public CartridgeColor()
		{
			this._Cartridge = new EntitySet<Cartridge>(new Action<Cartridge>(this.attach_Cartridge), new Action<Cartridge>(this.detach_Cartridge));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CartridgeColor_Cartridge", Storage="_Cartridge", ThisKey="ID", OtherKey="ColorID")]
		public EntitySet<Cartridge> Cartridge
		{
			get
			{
				return this._Cartridge;
			}
			set
			{
				this._Cartridge.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cartridge(Cartridge entity)
		{
			this.SendPropertyChanging();
			entity.CartridgeColor = this;
		}
		
		private void detach_Cartridge(Cartridge entity)
		{
			this.SendPropertyChanging();
			entity.CartridgeColor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setup")]
	public partial class Setup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MailServer;
		
		private string _AccountName;
		
		private string _Pwd;
		
		private string _Protocol;
		
		private int _Port;
		
		private string _TabNumber;
		
		private int _ID;
		
		private EntityRef<Employee> _Employee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailServerChanging(string value);
    partial void OnMailServerChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnPwdChanging(string value);
    partial void OnPwdChanged();
    partial void OnProtocolChanging(string value);
    partial void OnProtocolChanged();
    partial void OnPortChanging(int value);
    partial void OnPortChanged();
    partial void OnTabNumberChanging(string value);
    partial void OnTabNumberChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Setup()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailServer", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string MailServer
		{
			get
			{
				return this._MailServer;
			}
			set
			{
				if ((this._MailServer != value))
				{
					this.OnMailServerChanging(value);
					this.SendPropertyChanging();
					this._MailServer = value;
					this.SendPropertyChanged("MailServer");
					this.OnMailServerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwd", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Pwd
		{
			get
			{
				return this._Pwd;
			}
			set
			{
				if ((this._Pwd != value))
				{
					this.OnPwdChanging(value);
					this.SendPropertyChanging();
					this._Pwd = value;
					this.SendPropertyChanged("Pwd");
					this.OnPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Protocol", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				if ((this._Protocol != value))
				{
					this.OnProtocolChanging(value);
					this.SendPropertyChanging();
					this._Protocol = value;
					this.SendPropertyChanged("Protocol");
					this.OnProtocolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int NOT NULL")]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TabNumber
		{
			get
			{
				return this._TabNumber;
			}
			set
			{
				if ((this._TabNumber != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTabNumberChanging(value);
					this.SendPropertyChanging();
					this._TabNumber = value;
					this.SendPropertyChanged("TabNumber");
					this.OnTabNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Setup", Storage="_Employee", ThisKey="TabNumber", OtherKey="TabNumber", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Setup.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Setup.Add(this);
						this._TabNumber = value.TabNumber;
					}
					else
					{
						this._TabNumber = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
